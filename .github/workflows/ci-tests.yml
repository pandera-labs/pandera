name: CI Tests
on:
  push:
    branches:
      - master
      - dev
      - bugfix
      - "release/*"
  pull_request:
    branches:
      - master
      - dev
      - bugfix
      - "release/*"

env:
  DEFAULT_PYTHON: 3.8
  CI: "true"
  # Increase this value to reset cache if environment.yml has not changed
  CACHE_VERSION: 4

jobs:

  lint:
    name: Linters (${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9"]
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip  # ubuntu location
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: python -m pip install -r requirements-dev.txt
      - name: Pip info
        run: python -m pip list

      - name: Check requirements
        run: >
          nox
          -db virtualenv -r
          --non-interactive
          --python ${{ matrix.python-version }}
          --session requirements-${{ matrix.python-version }}

      - name: Check isort and black formatting
        run: >
          nox
          -db virtualenv -r
          --non-interactive
          --session black isort

      - name: Pylint
        run: >
          nox
          -db virtualenv -r
          --non-interactive
          --python ${{ matrix.python-version }}
          --session lint-${{ matrix.python-version }}

      - name: Mypy Type Checking
        run: >
          nox
          -db virtualenv -r
          --non-interactive
          --python ${{ matrix.python-version }}
          --session mypy-${{ matrix.python-version }}

  tests:
    name: >
      CI Tests (${{ matrix.python-version }}, ${{ matrix.os }}, pandas-${{ matrix.pandas-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.7", "3.8", "3.9"]
        pandas-version: ["1.2.5", "latest"]
        include:
        - os: ubuntu-latest
          path: ~/.cache/pip
        - os: macos-latest
          path: ~/Library/Caches/pip
        - os: windows-latest
          path: ~\AppData\Local\pip\Cache

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v2
        with:
          path: ${{ matrix.path }}
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      # this is a temporary measure to install setuptools due to this issue:
      # https://github.com/pandera-dev/pandera/pull/602#issuecomment-915622823
      - name: Build dependencies
        run: python -m pip install -r docs/requirements.txt
      - name: Install dependencies
        run: python -m pip install -r requirements-dev.txt
      - name: Pip info
        run: python -m pip list

      - name: Unit Tests - Core
        run: >
          nox
          -db virtualenv -r -v
          --non-interactive
          --session "tests-${{ matrix.python-version }}(extra='core', pandas='${{ matrix.pandas-version }}')"

      - name: Unit Tests - Hypotheses
        run: >
          nox
          -db virtualenv -r -v
          --non-interactive
          --session "tests-${{ matrix.python-version }}(extra='hypotheses', pandas='${{ matrix.pandas-version }}')"

      - name: Unit Tests - IO
        run: >
          nox
          -db virtualenv -r -v
          --non-interactive
          --session "tests-${{ matrix.python-version }}(extra='io', pandas='${{ matrix.pandas-version }}')"

      - name: Unit Tests - Strategies
        run: >
          nox
          -db virtualenv -r -v
          --non-interactive
          --session "tests-${{ matrix.python-version }}(extra='strategies', pandas='${{ matrix.pandas-version }}')"

      - name: Upload coverage to Codecov
        uses: "codecov/codecov-action@v1"

      - name: Check Docstrings
        run: >
          nox
          -db virtualenv -r -v
          --non-interactive
          --session "doctests-${{ matrix.python-version }}"

      - name: Check Docs
        run: >
          nox
          -db virtualenv -r -v
          --non-interactive
          --session "docs-${{ matrix.python-version }}"
